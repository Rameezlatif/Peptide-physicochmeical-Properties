# -*- coding: utf-8 -*-
"""Peptide Physiochemical Properties.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HSJVnuT9f7TdcrEGp50dywpeaVP_ThtI
"""

pip install biopython

from Bio.SeqUtils import ProtParam

def calculate_physicochemical_properties(sequence):
    # Calculate physicochemical properties using ProtParam
    protein = ProtParam.ProteinAnalysis(sequence)
    return {
        "molecular_weight": protein.molecular_weight(),
        "isoelectric_point": protein.isoelectric_point(),
        "instability_index": protein.instability_index(),
        "aromaticity": protein.aromaticity(),
        "flexibility": protein.flexibility() if protein.flexibility() else None,
        # Add more properties as needed
    }

def get_property_explanation(property_name):
    # Provide explanations for each physicochemical property
    explanations = {
        "molecular_weight": "Molecular Weight (Da)",
        "isoelectric_point": "Isoelectric Point",
        "instability_index": "Instability Index",
        "aromaticity": "Aromaticity",
        "flexibility": "Flexibility (N/A if not available)",
        # Add more explanations as needed
    }
    return explanations.get(property_name, "Explanation not available")

def calculate_similarity_percentage(properties_peptide1, properties_peptide2):
    # Compare properties and generate a similarity score
    similarity_score = 0.0
    num_properties = 0  # Initialize the count
    for property_name in properties_peptide1.keys():
        value_peptide1 = properties_peptide1[property_name]
        value_peptide2 = properties_peptide2[property_name]

        if value_peptide1 is not None and value_peptide2 is not None:
            min_value = min(value_peptide1, value_peptide2)
            max_value = max(value_peptide1, value_peptide2)

            # Check for division by zero
            if max_value != 0:
                similarity_score += min_value / max_value
                num_properties += 1  # Increment the count

    # Normalize the similarity score
    if num_properties != 0:
        similarity_percentage = (similarity_score / num_properties) * 100
    else:
        similarity_percentage = 0.0

    return similarity_percentage

def main():
    # Replace 'peptide1_sequence' and 'peptide2_sequence' with actual peptide sequences
    peptide1_sequence = "RKIPTEDEY"
    peptide2_sequence = "EYIPVEIKL"

    # Calculate physicochemical properties for each peptide
    properties_peptide1 = calculate_physicochemical_properties(peptide1_sequence)
    properties_peptide2 = calculate_physicochemical_properties(peptide2_sequence)

    # Calculate similarity percentage
    similarity_percentage = calculate_similarity_percentage(properties_peptide1, properties_peptide2)

    # Print the raw properties and explanations for each peptide
    print("Properties for Peptide 1:")
    for key, value in properties_peptide1.items():
        explanation = get_property_explanation(key)
        print(f"{explanation}: {value}")

    print("\nProperties for Peptide 2:")
    for key, value in properties_peptide2.items():
        explanation = get_property_explanation(key)
        print(f"{explanation}: {value}")

    # Print similarity percentage
    print(f"\nSimilarity Percentage: {similarity_percentage:.2f}%")

if __name__ == "__main__":
    main()